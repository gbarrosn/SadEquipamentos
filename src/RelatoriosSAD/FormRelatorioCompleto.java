/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RelatoriosSAD;


import Login.LoginUser;
import Principal.TelaPrincipal;
import SADpe.Pavimento.DadosPavimento;
import SADpe.Pavimento.Pavimento;
import Usuario.Usuario;
import com.cete.dynamicpdf.Document;
import com.cete.dynamicpdf.Font;
import com.cete.dynamicpdf.Page;
import com.cete.dynamicpdf.PageOrientation;
import com.cete.dynamicpdf.PageSize;
import com.cete.dynamicpdf.TextAlign;
import com.cete.dynamicpdf.pageelements.Label;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Posseidon
 */
public class FormRelatorioCompleto extends javax.swing.JFrame {

    /**
     * Creates new form FormRelatorioCompleto
     */
    public FormRelatorioCompleto() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Relatório Equipamentos SAD");
    }
    
     void icone() {
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("src\\resources\\favicon-cor.png"));
            this.setIconImage(img);
        } catch (IOException e) {
        }
    }
    
    private LoginUser logado;
     public FormRelatorioCompleto(LoginUser logado) {
         icone();
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Relatório Equipamentos SAD");
        this.logado=logado;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        ButtonSair = new javax.swing.JButton();
        jButtonRel_Full_Paisagem = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        textoTotalMaquinas = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        ButtonSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/arrow_left_32.png"))); // NOI18N
        ButtonSair.setText("Voltar à Janela Principal");
        ButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSairActionPerformed(evt);
            }
        });

        jButtonRel_Full_Paisagem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/file_format_pdf.png"))); // NOI18N
        jButtonRel_Full_Paisagem.setText("GERAR Relatório Completo");
        jButtonRel_Full_Paisagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRel_Full_PaisagemActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Relatório Completo");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/compare_documents3.png"))); // NOI18N
        jButton1.setText("Ver Resumo do Relatório");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textoTotalMaquinas.setText("Total de Máquinas:");

        jMenu1.setText("Arquivo");

        jMenuItem2.setText("Relatório por Pavimento");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Sair");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(ButtonSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRel_Full_Paisagem, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(textoTotalMaquinas)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(textoTotalMaquinas)
                .addGap(22, 22, 22)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRel_Full_Paisagem, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private ArrayList<Pavimento> allPavimentos;
    ArrayList<Usuario> listaDeUsuariosRelatorio;
    ArrayList<Usuario> listaDeUsuariosRelatorioCompleto;
    ArrayList<Pavimento> listaDePavimentos;
    int subtotalPavimento;
    int totalGeral;
    Page pagina = new Page(PageSize.LETTER, PageOrientation.PORTRAIT,54.0f);
    
    private void ButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSairActionPerformed
        TelaPrincipal inicial= new TelaPrincipal(this.logado);
        inicial.setVisible(true);
        dispose();
    }//GEN-LAST:event_ButtonSairActionPerformed

    
public void carregarLista(Pavimento pavimentoDaLista){
    
            
        String titulo = "Relatório de Acompanhamento dos Equipamentos\nSecretaria de Administração de Pernambuco";
          
        Label objLabeTitulo = new Label(titulo, 100, -30, 504, 100, Font.getHelvetica(),14, TextAlign.CENTER);
        pagina.getElements().add(objLabeTitulo);
        
        String pavimento = "Pavimento: " +pavimentoDaLista.getPavimento()+" - "+subtotalPavimento+" Computadore(s).";
        Label objLabelPavimento = new Label(pavimento, -30, 40, 300, 100, Font.getHelvetica(),10, TextAlign.LEFT);
        pagina.getElements().add(objLabelPavimento);      
         
          String userRelatorioTotal = "Total Geral: "+totalGeral;
          Label objLabelTotal = new Label(userRelatorioTotal, 640, 40, 200, 100, Font.getHelvetica(),10, TextAlign.LEFT);
          pagina.getElements().add(objLabelTotal);
        
        String usuario = "Nome";
        Label objLabelusuario = new Label(usuario, -30, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelusuario);
        
        String hostName = "Id.Computador";
        Label objLabelHostName = new Label(hostName, 105, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelHostName);
        
        String tomboGab = "Tomb.";
        Label objLabelTomboGab = new Label(tomboGab, 185, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelTomboGab);
        
        String cmtechGab = "CMTECH";
        Label objLabelcmtechGab = new Label(cmtechGab, 225, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelcmtechGab);
        
        String serieGab = "Serie";
        Label objLabelSerieGab = new Label(serieGab, 272, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelSerieGab);
        
        String configGab = "Configuração";
        Label objLabelConfigGab = new Label(configGab, 337, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelConfigGab);
        
        String propGab = "Proprietário";
        Label objLabelPropGab = new Label(propGab, 427, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelPropGab);
        
        String modeloMonitor = "Monitor";
        Label objLabelModeloMonitor = new Label(modeloMonitor, 485, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelModeloMonitor);
        
        String TomboMonitor = "Tomb.";
        Label objLabelTomboMonitor = new Label(TomboMonitor, 557, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelTomboMonitor);
        
        String serieMonitor = "Serie";
        Label objLabelSerieMonitor = new Label(serieMonitor, 595, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelSerieMonitor);
         
        
        String propMonitor = "Proprietário";
        Label objLabelPropMonitor = new Label(propMonitor, 669, 70, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelPropMonitor);
         
}

public void carregarLista_retrato(Pavimento pavimentoDaLista){
    String titulo = "Relatório de Acompanhamento dos Equipamentos\nSecretaria de Administração de Pernambuco";
          
        Label objLabeTitulo = new Label(titulo, 0, 0, 504, 100, Font.getHelvetica(),16, TextAlign.CENTER);
        pagina.getElements().add(objLabeTitulo);
        
        String pavimento = "Pavimento: " +pavimentoDaLista.getPavimento();
        Label objLabelPavimento = new Label(pavimento, 0, 90, 300, 100, Font.getHelvetica(),12, TextAlign.LEFT);
        pagina.getElements().add(objLabelPavimento);
        
        String usuario = "Nome";
        Label objLabelusuario = new Label(usuario, 0, 130, 200, 100, Font.getHelvetica(),10, TextAlign.LEFT);
        pagina.getElements().add(objLabelusuario);
        
        String hostName = "Host Name";
        Label objLabelHostName = new Label(hostName, 70, 130, 200, 100, Font.getHelvetica(),10, TextAlign.CENTER);
        pagina.getElements().add(objLabelHostName);
        
        String tomboGab = "Tombo";
        Label objLabelTomboGab = new Label(tomboGab, 170, 130, 200, 100, Font.getHelvetica(),10, TextAlign.CENTER);
        pagina.getElements().add(objLabelTomboGab);
        
        String cmtechGab = "CMTECH";
        Label objLabelcmtechGab = new Label(cmtechGab, 240, 130, 200, 100, Font.getHelvetica(),10, TextAlign.CENTER);
        pagina.getElements().add(objLabelcmtechGab);
        
        String configGab = "Configuração";
        Label objLabelConfigGab = new Label(configGab, 290, 130, 200, 100, Font.getHelvetica(),10, TextAlign.RIGHT);
        pagina.getElements().add(objLabelConfigGab);
}

public void carregarUsers (Usuario user,int altura){
         try{
        
        //NOME DO USUARIO
        String userRelatorio = user.getNome();  
        Label objLabelNomeUser = new Label(userRelatorio, -30, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelNomeUser);
        //HOST NAME
        String hostNameRelatorio = user.getNomepc();
        Label objLabelHostNameRelatorio = new Label(hostNameRelatorio, 105, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelHostNameRelatorio);
        //TOMBO
        String tomboRelatorio = user.getTombamentoMicro()+"";
        Label objLabelTomboMicro = new Label(tomboRelatorio, 185, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelTomboMicro);
        //CMTECH
        String cmtechRelatorio = user.getEtiquetaCESU()+"";
        Label objLabelcmtechMicro = new Label(cmtechRelatorio, 225, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);
        pagina.getElements().add(objLabelcmtechMicro);
        //SERIE MICRO
        String serieRelatorio = user.getSerieMicro();
        Label objLabelSerieMicro = new Label(serieRelatorio, 272, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelSerieMicro);
        //CONFIGURAÇÃO
        String configRelatorio = user.getConfigMicro().getConfiguracao();
        Label objLabelConfiguracaoMicro = new Label(configRelatorio, 337, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelConfiguracaoMicro);
        //PROPRIETÁRIO MICRO
        String propMicroRelatorio = user.getProprietarioMicro().getProprietario();
        Label objLabelPropMicro = new Label(propMicroRelatorio, 427, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelPropMicro);
        //MODELO MONITOR
        String modeloMRelatorio = user.getModeloMonitor().getModelo();
        Label objLabelModeloMicro = new Label(modeloMRelatorio, 485, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelModeloMicro);
        //TOMBO MONITOR
        String tomboMRelatorio = user.getTombamentoMonitor()+"";
        Label objLabelTomboMonitor = new Label(tomboMRelatorio, 557, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelTomboMonitor);
        //SERIE MONITOR
        String serieMRelatorio = user.getSerieMonitor();
        Label objLabelSerieMonitor = new Label(serieMRelatorio, 595, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelSerieMonitor);
        //PROPRIETARIO MONITOR
        String propMRelatorio = user.getProprietarioMonitor().getProprietario();
        Label objLabelPropMonitor = new Label(propMRelatorio, 669, altura, 200, 100, Font.getHelvetica(),8, TextAlign.LEFT);       
        pagina.getElements().add(objLabelPropMonitor);
        
        }catch(Exception ex){
            
        }
        
}

public void carregarUsers_retrato (Usuario user,int altura){
    /*
    try{
        
        //NOME DO USUARIO
        String userRelatorio = user.getNome();  
        Label objLabelNomeUser = new Label(userRelatorio, 0, altura, 200, 100, Font.getHelvetica(),9, TextAlign.LEFT);
        pagina.getElements().add(objLabelNomeUser);
        //HOST NAME
        String hostNameRelatorio = user.getNomepc();
        Label objLabelHostNameRelatorio = new Label(hostNameRelatorio, 70, altura, 200, 100, Font.getHelvetica(),9, TextAlign.CENTER);
        pagina.getElements().add(objLabelHostNameRelatorio);
        //TOMBO
        String tomboRelatorio = user.getTombamentoMicro()+"";
        Label objLabelTomboMicro = new Label(tomboRelatorio, 170, altura, 200, 100, Font.getHelvetica(),9, TextAlign.CENTER);
        pagina.getElements().add(objLabelTomboMicro);
        //CMTECH
        String cmtechRelatorio = user.getEtiquetaCMTECH()+"";
        Label objLabelcmtechMicro = new Label(cmtechRelatorio, 240, altura, 200, 100, Font.getHelvetica(),9, TextAlign.CENTER);
        pagina.getElements().add(objLabelcmtechMicro);
        //CONFIGURAÇÃO
        String configRelatorio = user.getConfigMicro().getConfiguracao();
        Label objLabelConfiguracaoMicro = new Label(configRelatorio, 290, altura, 200, 100, Font.getHelvetica(),9, TextAlign.RIGHT);       
        pagina.getElements().add(objLabelConfiguracaoMicro);
        
        }catch(Exception ex){
            
        }*/
}
    
    
    private void jButtonRel_Full_PaisagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRel_Full_PaisagemActionPerformed
        try{

            Document documento = new Document();
            documento.setCreator("Gabriel Barros");
            documento.setAuthor("Gabriel Barros");
            documento.setTitle("Equipamentos SAD");

            Pavimento filtroPavimento = new Pavimento();
            filtroPavimento.setPavimento("");

            DadosPavimento dadosPavimentoRelatorioCompleto = new DadosPavimento();
            listaDePavimentos = dadosPavimentoRelatorioCompleto.listarPavimento(filtroPavimento);
            //ArrayList PageList = new ArrayList();

            int altura=0;
            int numMax=0;
            int numMin=0;
            int numAtual=0;

            for (Pavimento pavimentoDaLista : listaDePavimentos){
                try{
                    //documento.getPages().add(pagina);
                    Page pagina = new Page(PageSize.LETTER, PageOrientation.LANDSCAPE,54.0f);;
                    documento.getPages().add(pagina);
                    this.pagina=pagina;
                    altura=80;
                    numMax=30;
                    numMin=1;
                    numAtual=0;
                }catch (Exception ex){
                    throw new Exception("Erro ao criar primeira página do pavimento: "+pavimentoDaLista.getPavimento());
                }

                try{
                    Usuario userPavimentoRelatorio = new Usuario();

                    pavimentoDaLista.getIdPavimento();
                    pavimentoDaLista.getPavimento();

                    userPavimentoRelatorio.setPavimentoUsuario(pavimentoDaLista);

                    DadosRelatorios dadosRelatorioTotal = new DadosRelatorios();

                    listaDeUsuariosRelatorioCompleto=dadosRelatorioTotal.listarUsuarioPavimentoRelatorio(userPavimentoRelatorio);
                    subtotalPavimento = dadosRelatorioTotal.contagemUsuariosPavimento(userPavimentoRelatorio);
                    totalGeral = dadosRelatorioTotal.contagemTotal();
                }catch(Exception ex){
                    throw new Exception("Erro ao carregar usuários do pavimento: "+pavimentoDaLista.getPavimento());
                }

                try{

                    carregarLista(pavimentoDaLista);

                }catch(Exception ex){
                    throw new Exception("Erro ao definir título e colunas da primeira página do pavimento: "+ pavimentoDaLista.getPavimento());
                }

                for (Usuario user:listaDeUsuariosRelatorioCompleto){

                    try{

                        if (numAtual==numMax){

                            Page pagina = new Page(PageSize.LETTER, PageOrientation.LANDSCAPE,54.0f);;
                            documento.getPages().add(pagina);
                            this.pagina=pagina;
                            numAtual=0;
                            altura=80;

                            carregarLista(pavimentoDaLista);
                            numAtual = numAtual+numMin;
                            numAtual=0;
                            altura=80;
                        }
                    }catch(Exception ex){
                        throw new Exception("Erro ao Criar Página de Continuação: "+ex.getMessage());
                    }

                    try{

                        altura=altura+15;
                        carregarUsers(user, altura);
                        numAtual = numAtual+numMin;

                    }
                    catch(Exception ex){
                        throw new Exception("Erro Executar função \"CarregarUser()\" : "+ex.getMessage());
                    }
                }
                
                /*
                try{
                    String userRelatorioSubTotal = "SUBTOTAL: "+subtotalPavimento;
                    Label objLabelSubTotal = new Label(userRelatorioSubTotal, 610, 500, 200, 100, Font.getHelvetica(),12, TextAlign.LEFT);
                    pagina.getElements().add(objLabelSubTotal);
                                      
                }catch(Exception ex){
                    throw new Exception("Erro ao somar SUBTOTAL.");
                }
                */
            }
            
            JanelaSalvar salvar = new JanelaSalvar(documento,filtroPavimento);
            salvar.setVisible(true);
                   
            /*        
            // Save the PDF document
            String url;
            Date gerarNomeArquivo = new Date();

            if(checkBoxSalvarNaRede.isSelected()==true){

                url = "\\\\sadfs01\\GTINF\\USINF\\USINF 2014\\Sistema Micros\\Sistema Micros - JAVA\\Relatorios\\Relatorio - Completo - Paisagem - "+gerarNomeArquivo.getTime()+".pdf";
                documento.draw(url);

            }else{
                String a = System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos";

                if(new File(a).exists()==false){
                    new File(System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos").mkdirs();
                }

                url = a+"\\Relatorio de Equipamentos - Completo - Paisagem - "+gerarNomeArquivo.getTime()+".pdf";
                documento.draw(url);
            }

            JOptionPane.showMessageDialog(rootPane, "Relatório gerado com sucesso em:   "+"\""+url+"\"");
                */
            
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Erro ao lançar dados dos usuários no Relatório : "+ex.getMessage());
        }
    }//GEN-LAST:event_jButtonRel_Full_PaisagemActionPerformed

    
    /*
    OPCAO IMPRIMIR EM MODO PAISAGEM *DESATUALIZADA*
    
        try{

            Document documento = new Document();
            documento.setCreator("Aírton Oliveira");
            documento.setAuthor("Aírton Oliveira");
            documento.setTitle("Equipamentos SAD");

            Pavimento filtroPavimento = new Pavimento();
            filtroPavimento.setPavimento("");

            DadosPavimento dadosPavimentoRelatorioCompleto = new DadosPavimento();
            listaDePavimentos = dadosPavimentoRelatorioCompleto.listarPavimento(filtroPavimento);
            //ArrayList PageList = new ArrayList();

            int altura=0;
            int numMax=0;
            int numMin=0;
            int numAtual=0;

            for (Pavimento pavimentoDaLista : listaDePavimentos){
                try{
                    //documento.getPages().add(pagina);
                    Page pagina = new Page(PageSize.LETTER, PageOrientation.PORTRAIT,54.0f);;
                    documento.getPages().add(pagina);
                    this.pagina=pagina;
                    altura=140;
                    numMax=36;
                    numMin=1;
                    numAtual=0;
                }catch (Exception ex){
                    throw new Exception("Erro ao criar primeira página do pavimento: "+pavimentoDaLista.getPavimento());
                }

                try{
                    Usuario userPavimentoRelatorio = new Usuario();

                    pavimentoDaLista.getIdPavimento();
                    pavimentoDaLista.getPavimento();

                    userPavimentoRelatorio.setPavimentoUsuario(pavimentoDaLista);

                    DadosRelatorios dadosRelatorioTotal = new DadosRelatorios();

                    listaDeUsuariosRelatorioCompleto=dadosRelatorioTotal.listarUsuarioPavimentoRelatorio(userPavimentoRelatorio);
                    subtotalPavimento = dadosRelatorioTotal.contagemUsuariosPavimento(userPavimentoRelatorio);
                }catch(Exception ex){
                    throw new Exception("Erro ao carregar usuários do pavimento: "+pavimentoDaLista.getPavimento());
                }

                try{

                    carregarLista_retrato(pavimentoDaLista);

                }catch(Exception ex){
                    throw new Exception("Erro ao definir título e colunas da primeira página do pavimento: "+ pavimentoDaLista.getPavimento());
                }

                for (Usuario user:listaDeUsuariosRelatorioCompleto){

                    try{

                        if (numAtual==numMax){

                            Page pagina = new Page(PageSize.LETTER, PageOrientation.PORTRAIT,54.0f);;
                            documento.getPages().add(pagina);
                            this.pagina=pagina;
                            numAtual=0;
                            altura=140;

                            carregarLista_retrato(pavimentoDaLista);
                            numAtual = numAtual+numMin;
                            numAtual=0;
                            altura=140;
                        }
                    }catch(Exception ex){
                        throw new Exception("Erro ao Criar Página de Continuação: "+ex.getMessage());
                    }

                    try{

                        altura=altura+15;
                        carregarUsers_retrato(user, altura);
                        numAtual = numAtual+numMin;

                    }
                    catch(Exception ex){
                        throw new Exception("Erro Executar função \"CarregarUser()\" : "+ex.getMessage());
                    }
                }

                try{
                    String userRelatorioSubTotal = "SUBTOTAL: "+subtotalPavimento;
                    Label objLabelSubTotal = new Label(userRelatorioSubTotal, 0, altura+40, 200, 100, Font.getHelvetica(),12, TextAlign.LEFT);
                    pagina.getElements().add(objLabelSubTotal);
                }catch(Exception ex){
                    throw new Exception("Erro ao somar SUBTOTAL.");
                }
            }

            // Save the PDF document
            String url;
            Date gerarNomeArquivo = new Date();

            if(checkBoxSalvarNaRede.isSelected()==true){

                url = "\\\\sadfs01\\GTINF\\USINF\\USINF 2014\\Sistema Micros\\Sistema Micros - JAVA\\Relatorios\\Relatorio - Completo - "+gerarNomeArquivo.getTime()+".pdf";
                documento.draw(url);

            }else{
                String a = System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos";

                if(new File(a).exists()==false){
                    new File(System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos").mkdirs();
                }

                url = a+"\\Relatorio de Equipamentos - Completo - "+gerarNomeArquivo.getTime()+".pdf";
                documento.draw(url);
            }

            JOptionPane.showMessageDialog(rootPane, "Relatório gerado com sucesso em:   "+"\""+url+"\"");

        }catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Erro ao lançar dados dos usuários no Relatório : "+ex.getMessage());
        }  
    
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        
        try{  
    
        DadosRelatorios dadosTotal = new DadosRelatorios();
        totalGeral = dadosTotal.contagemTotal();
              
        textoTotalMaquinas.setText("Total de Máquinas: "+totalGeral);
        
        
           }catch (Exception ex){
                JOptionPane.showMessageDialog(rootPane,"Erro ao gerar resumo da pesquisa: "+ ex.getMessage());
           }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
     TelaPrincipal tela = new TelaPrincipal(this.logado);
     tela.setVisible(true);
     dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    FormRelatorios relatorios= new FormRelatorios(this.logado);
    relatorios.setVisible(true);
    dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioCompleto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormRelatorioCompleto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonSair;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonRel_Full_Paisagem;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel textoTotalMaquinas;
    // End of variables declaration//GEN-END:variables
}
