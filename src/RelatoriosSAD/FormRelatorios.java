/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RelatoriosSAD;

import Geral.Fachada;
import Login.LoginUser;
import Principal.TelaPrincipal;
import SADpe.Pavimento.Pavimento;
import Usuario.Usuario;
import com.cete.dynamicpdf.Document;
import com.cete.dynamicpdf.Font;
import com.cete.dynamicpdf.Page;
import com.cete.dynamicpdf.PageOrientation;
import com.cete.dynamicpdf.PageSize;
import com.cete.dynamicpdf.TextAlign;
import com.cete.dynamicpdf.pageelements.Label;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Posseidon
 */
public class FormRelatorios extends javax.swing.JFrame {

    private Object printService;

    /**
     * Creates new form FormRelatorios
     */
    public FormRelatorios() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Relatório Equipamentos SAD");
        comboBoxListagem();
    }

    void icone() {
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("src\\resources\\favicon-cor.png"));
            this.setIconImage(img);
        } catch (IOException e) {
        }
    }

    private LoginUser logado;

    public FormRelatorios(LoginUser logado) {
        icone();
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Relatório Equipamentos SAD");
        comboBoxListagem();
        this.logado = logado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ComboBoxPavimento = new javax.swing.JComboBox();
        ButtonPreverPavimento = new javax.swing.JButton();
        ButtonSair = new javax.swing.JButton();
        textoPavimento = new javax.swing.JLabel();
        textoSubTotal = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonRel_Pav_Paisagem = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        textoPaginas = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        ComboBoxPavimento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ButtonPreverPavimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/compare_documents3.png"))); // NOI18N
        ButtonPreverPavimento.setText("Ver Resumo do Relatório");
        ButtonPreverPavimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreverPavimentoActionPerformed(evt);
            }
        });

        ButtonSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/arrow_left_32.png"))); // NOI18N
        ButtonSair.setText("Voltar à Janela Principal");
        ButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSairActionPerformed(evt);
            }
        });

        textoPavimento.setText("Pavimento:");

        textoSubTotal.setText("Total de Máquinas:");

        jButtonRel_Pav_Paisagem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icons/file_format_pdf.png"))); // NOI18N
        jButtonRel_Pav_Paisagem.setText("Gerar  Relatório por Pavimento");
        jButtonRel_Pav_Paisagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRel_Pav_PaisagemActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Relatório por Pavimento");

        jLabel5.setText("Escolha um filtro para criação do relatório.");

        textoPaginas.setText("Páginas:");

        jMenu1.setText("Arquivo");

        jMenuItem2.setText("Relatório Completo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonPreverPavimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(ButtonSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ComboBoxPavimento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRel_Pav_Paisagem, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(jSeparator4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(16, 16, 16)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(textoPaginas)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(textoPavimento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(textoSubTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4)
                .addGap(43, 43, 43)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComboBoxPavimento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButtonPreverPavimento)
                .addGap(12, 12, 12)
                .addComponent(textoPavimento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textoSubTotal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textoPaginas)
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRel_Pav_Paisagem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<Pavimento> allPavimentos;
    ArrayList<Usuario> listaDeUsuariosRelatorio;
    ArrayList<Usuario> listaDeUsuariosRelatorioCompleto;
    ArrayList<Pavimento> listaDePavimentos;
    int subtotalPavimento;
    int totalGeral;
    Page pagina = new Page(PageSize.LETTER, PageOrientation.PORTRAIT, 54.0f);

    /*
    
     BOTAO RELATORIO EM MODO RETRATO *DESATUALIZADO*
     
     try{

     Document documento = new Document();
     documento.setCreator("Aírton Oliveira");
     documento.setAuthor("Aírton Oliveira");
     documento.setTitle("Equipamentos SAD");
            
     Pavimento filtroPavimento = new Pavimento();
            
     try {  
            
     int SelecionadoPavimentoRelatorio= ComboBoxPavimento.getSelectedIndex()-1;  
     filtroPavimento=(allPavimentos.get(SelecionadoPavimentoRelatorio));
            
     } catch (Exception e) {
     throw new Exception ("Selecione um Pavimento para o Relatório!\nCaso deseje um relatório completo clique em \"Arquivo > Relatório Completo\".");
     }
        

            

     DadosRelatorios dadosPavimentoRelatorio = new DadosRelatorios();
     listaDePavimentos = dadosPavimentoRelatorio.listarPavimento(filtroPavimento);
     //ArrayList PageList = new ArrayList();

     int altura=0;
     int numMax=0;
     int numMin=0;
     int numAtual=0;

     for (Pavimento pavimentoDaLista : listaDePavimentos){
     try{
     //documento.getPages().add(pagina);
     Page pagina = new Page(PageSize.LETTER, PageOrientation.LANDSCAPE,54.0f);;
     documento.getPages().add(pagina);
     this.pagina=pagina;
     altura=80;
     numMax=30;
     numMin=1;
     numAtual=0;
     }catch (Exception ex){
     throw new Exception("Erro ao criar primeira página do pavimento: "+pavimentoDaLista.getPavimento());
     }

     try{
     Usuario userPavimentoRelatorio = new Usuario();

     pavimentoDaLista.getIdPavimento();
     pavimentoDaLista.getPavimento();

     userPavimentoRelatorio.setPavimentoUsuario(pavimentoDaLista);

     DadosRelatorios dadosRelatorioTotal = new DadosRelatorios();

     listaDeUsuariosRelatorioCompleto=dadosRelatorioTotal.listarUsuarioPavimentoRelatorio(userPavimentoRelatorio);
     subtotalPavimento = dadosRelatorioTotal.contagemUsuariosPavimento(userPavimentoRelatorio);
     }catch(Exception ex){
     throw new Exception("Erro ao carregar usuários do pavimento: "+pavimentoDaLista.getPavimento());
     }

     try{

     carregarLista(pavimentoDaLista);

     }catch(Exception ex){
     throw new Exception("Erro ao definir título e colunas da primeira página do pavimento: "+ pavimentoDaLista.getPavimento());
     }

     for (Usuario user:listaDeUsuariosRelatorioCompleto){

     try{

     if (numAtual==numMax){

     Page pagina = new Page(PageSize.LETTER, PageOrientation.LANDSCAPE,54.0f);;
     documento.getPages().add(pagina);
     this.pagina=pagina;
     numAtual=0;
     altura=80;

     carregarLista(pavimentoDaLista);
     numAtual = numAtual+numMin;
     numAtual=0;
     altura=80;
     }
     }catch(Exception ex){
     throw new Exception("Erro ao Criar Página de Continuação: "+ex.getMessage());
     }

     try{

     altura=altura+15;
     carregarUsers(user, altura);
     numAtual = numAtual+numMin;

     }
     catch(Exception ex){
     throw new Exception("Erro Executar função \"CarregarUser()\" : "+ex.getMessage());
     }
     }
                
                
     //try{
     //    String userRelatorioSubTotal = "Total: "+subtotalPavimento;
     //    Label objLabelSubTotal = new Label(userRelatorioSubTotal, 615, 40, 200, 100, Font.getHelvetica(),10, TextAlign.LEFT);
     //    pagina.getElements().add(objLabelSubTotal);
     //}catch(Exception ex){
     //    throw new Exception("Erro ao somar TOTAL.");
     //}
                
     }

     // Save the PDF document
     String url;
     Date gerarNomeArquivo = new Date();

     if(checkBoxSalvarNaRede.isSelected()==true){

     url = "\\\\sadfs01\\GTINF\\USINF\\USINF 2014\\Sistema Micros\\Sistema Micros - JAVA\\Relatorios\\Relatorio - Contagem - "+gerarNomeArquivo.getTime()+".pdf";
     documento.draw(url);

     }else{
     String a = System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos";

     if(new File(a).exists()==false){
     new File(System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos").mkdirs();
     }

     url = a+"\\Relatorio - Contagem - "+filtroPavimento.getPavimento()+" - "+gerarNomeArquivo.getTime()+".pdf";
     documento.draw(url);
     }

     JOptionPane.showMessageDialog(rootPane, "Relatório gerado com sucesso em:   "+"\""+url+"\"");

     }catch (Exception ex){
     JOptionPane.showMessageDialog(null, "Erro ao tentar gerar relatório: "+ex.getMessage());
     }
     */

    private void ButtonPreverPavimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreverPavimentoActionPerformed

        try {

            Usuario userPreverRelatorio = new Usuario();

            try {

                int SelecionadoPavimentoRelatorio = ComboBoxPavimento.getSelectedIndex() - 1;
                userPreverRelatorio.setPavimentoUsuario(allPavimentos.get(SelecionadoPavimentoRelatorio));

            } catch (Exception e) {
                throw new Exception("Selecione um Pavimento para o Relatório!\nCaso deseje um relatório completo clique em \"Arquivo > Relatório Completo\".");
            }

            DadosRelatorios dadosUserPavimentoRelatorio = new DadosRelatorios();
            subtotalPavimento = dadosUserPavimentoRelatorio.contagemUsuariosPavimento(userPreverRelatorio);

            textoPavimento.setText("Pavimento: " + userPreverRelatorio.getPavimentoUsuario().getPavimento());
            textoSubTotal.setText("Total de Máquinas: " + subtotalPavimento);
            if (subtotalPavimento <= 30) {
                textoPaginas.setText("Páginas: " + 1);
            } else if ((subtotalPavimento > 30) && (subtotalPavimento <= 60)) {
                textoPaginas.setText("Páginas: " + 2);
            } else if ((subtotalPavimento > 60) && (subtotalPavimento <= 90)) {
                textoPaginas.setText("Páginas: " + 3);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao gerar resumo da pesquisa: " + ex.getMessage());
        }

    }//GEN-LAST:event_ButtonPreverPavimentoActionPerformed

    private void ButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSairActionPerformed
        TelaPrincipal inicial = new TelaPrincipal(this.logado);
        inicial.setVisible(true);
        dispose();
    }//GEN-LAST:event_ButtonSairActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        TelaPrincipal inicial = new TelaPrincipal(this.logado);
        inicial.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void carregarLista(Pavimento pavimentoDaLista) {

        String titulo = "Relatório de Acompanhamento dos Equipamentos\nSecretaria de Administração de Pernambuco";

        Label objLabeTitulo = new Label(titulo, 100, -30, 504, 100, Font.getHelvetica(), 14, TextAlign.CENTER);
        pagina.getElements().add(objLabeTitulo);

        String pavimento = "Pavimento: " + pavimentoDaLista.getPavimento() + " - " + subtotalPavimento + " Computadore(s).";
        Label objLabelPavimento = new Label(pavimento, -30, 40, 300, 100, Font.getHelvetica(), 10, TextAlign.LEFT);
        pagina.getElements().add(objLabelPavimento);

        String usuario = "Nome";
        Label objLabelusuario = new Label(usuario, -30, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelusuario);

        String hostName = "Id.Computador";
        Label objLabelHostName = new Label(hostName, 105, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelHostName);

        String tomboGab = "Tomb.";
        Label objLabelTomboGab = new Label(tomboGab, 185, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelTomboGab);

        String cmtechGab = "CESU";
        Label objLabelcmtechGab = new Label(cmtechGab, 225, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelcmtechGab);

        String serieGab = "Serie";
        Label objLabelSerieGab = new Label(serieGab, 272, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelSerieGab);

        String configGab = "Configuração";
        Label objLabelConfigGab = new Label(configGab, 337, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelConfigGab);

        String propGab = "Proprietário";
        Label objLabelPropGab = new Label(propGab, 427, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelPropGab);

        String modeloMonitor = "Monitor";
        Label objLabelModeloMonitor = new Label(modeloMonitor, 485, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelModeloMonitor);

        String TomboMonitor = "Tomb.";
        Label objLabelTomboMonitor = new Label(TomboMonitor, 557, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelTomboMonitor);

        String serieMonitor = "Serie";
        Label objLabelSerieMonitor = new Label(serieMonitor, 595, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelSerieMonitor);

        String propMonitor = "Proprietário";
        Label objLabelPropMonitor = new Label(propMonitor, 669, 70, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
        pagina.getElements().add(objLabelPropMonitor);

    }

    public void carregarUsers(Usuario user, int altura) {
        try {

            //NOME DO USUARIO
            String userRelatorio = user.getNome();
            Label objLabelNomeUser = new Label(userRelatorio, -30, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelNomeUser);
            //HOST NAME
            String hostNameRelatorio = user.getNomepc();
            Label objLabelHostNameRelatorio = new Label(hostNameRelatorio, 105, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelHostNameRelatorio);
            //TOMBO
            String tomboRelatorio = user.getTombamentoMicro() + "";
            Label objLabelTomboMicro = new Label(tomboRelatorio, 185, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelTomboMicro);
            //CMTECH
            String cmtechRelatorio = user.getEtiquetaCESU() + "";
            Label objLabelcmtechMicro = new Label(cmtechRelatorio, 225, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelcmtechMicro);
            //SERIE MICRO
            String serieRelatorio = user.getSerieMicro();
            Label objLabelSerieMicro = new Label(serieRelatorio, 272, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelSerieMicro);
            //CONFIGURAÇÃO
            String configRelatorio = user.getConfigMicro().getConfiguracao();
            Label objLabelConfiguracaoMicro = new Label(configRelatorio, 337, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelConfiguracaoMicro);
            //PROPRIETÁRIO MICRO
            String propMicroRelatorio = user.getProprietarioMicro().getProprietario();
            Label objLabelPropMicro = new Label(propMicroRelatorio, 427, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelPropMicro);
            //MODELO MONITOR
            String modeloMRelatorio = user.getModeloMonitor().getModelo();
            Label objLabelModeloMicro = new Label(modeloMRelatorio, 485, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelModeloMicro);
            //TOMBO MONITOR
            String tomboMRelatorio = user.getTombamentoMonitor() + "";
            Label objLabelTomboMonitor = new Label(tomboMRelatorio, 557, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelTomboMonitor);
            //SERIE MONITOR
            String serieMRelatorio = user.getSerieMonitor();
            Label objLabelSerieMonitor = new Label(serieMRelatorio, 595, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelSerieMonitor);
            //PROPRIETARIO MONITOR
            String propMRelatorio = user.getProprietarioMonitor().getProprietario();
            Label objLabelPropMonitor = new Label(propMRelatorio, 669, altura, 200, 100, Font.getHelvetica(), 8, TextAlign.LEFT);
            pagina.getElements().add(objLabelPropMonitor);

        } catch (Exception ex) {

        }

    }

    private void jButtonRel_Pav_PaisagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRel_Pav_PaisagemActionPerformed

        try {

            Document documento = new Document();
            documento.setCreator(this.logado.getLogin());
            documento.setAuthor(this.logado.getLoga());
            documento.setTitle("Equipamentos SAD");

            Pavimento filtroPavimento = new Pavimento();

            try {

                int SelecionadoPavimentoRelatorio = ComboBoxPavimento.getSelectedIndex() - 1;
                filtroPavimento = (allPavimentos.get(SelecionadoPavimentoRelatorio));

            } catch (Exception e) {
                throw new Exception("Selecione um Pavimento para o Relatório!\nCaso deseje um relatório completo clique em \"Arquivo > Relatório Completo\".");
            }

            DadosRelatorios dadosPavimentoRelatorio = new DadosRelatorios();
            listaDePavimentos = dadosPavimentoRelatorio.listarPavimento(filtroPavimento);
            //ArrayList PageList = new ArrayList();

            int altura = 0;
            int numMax = 0;
            int numMin = 0;
            int numAtual = 0;

            for (Pavimento pavimentoDaLista : listaDePavimentos) {
                try {
                    //documento.getPages().add(pagina);
                    Page pagina = new Page(PageSize.LETTER, PageOrientation.LANDSCAPE, 54.0f);;
                    documento.getPages().add(pagina);
                    this.pagina = pagina;
                    altura = 80;
                    numMax = 30;
                    numMin = 1;
                    numAtual = 0;
                } catch (Exception ex) {
                    throw new Exception("Erro ao criar primeira página do pavimento: " + pavimentoDaLista.getPavimento());
                }

                try {
                    Usuario userPavimentoRelatorio = new Usuario();

                    pavimentoDaLista.getIdPavimento();
                    pavimentoDaLista.getPavimento();

                    userPavimentoRelatorio.setPavimentoUsuario(pavimentoDaLista);

                    DadosRelatorios dadosRelatorioTotal = new DadosRelatorios();

                    listaDeUsuariosRelatorioCompleto = dadosRelatorioTotal.listarUsuarioPavimentoRelatorio(userPavimentoRelatorio);
                    subtotalPavimento = dadosRelatorioTotal.contagemUsuariosPavimento(userPavimentoRelatorio);
                } catch (Exception ex) {
                    throw new Exception("Erro ao carregar usuários do pavimento: " + pavimentoDaLista.getPavimento());
                }

                try {

                    carregarLista(pavimentoDaLista);

                } catch (Exception ex) {
                    throw new Exception("Erro ao definir título e colunas da primeira página do pavimento: " + pavimentoDaLista.getPavimento());
                }

                for (Usuario user : listaDeUsuariosRelatorioCompleto) {

                    try {

                        if (numAtual == numMax) {

                            Page pagina = new Page(PageSize.LETTER, PageOrientation.LANDSCAPE, 54.0f);;
                            documento.getPages().add(pagina);
                            this.pagina = pagina;
                            numAtual = 0;
                            altura = 80;

                            carregarLista(pavimentoDaLista);
                            numAtual = numAtual + numMin;
                            numAtual = 0;
                            altura = 80;
                        }
                    } catch (Exception ex) {
                        throw new Exception("Erro ao Criar Página de Continuação: " + ex.getMessage());
                    }

                    try {

                        altura = altura + 15;
                        carregarUsers(user, altura);
                        numAtual = numAtual + numMin;

                    } catch (Exception ex) {
                        throw new Exception("Erro Executar função \"CarregarUser()\" : " + ex.getMessage());
                    }
                }

                /*
                 try{
                 String userRelatorioSubTotal = "Total: "+subtotalPavimento;
                 Label objLabelSubTotal = new Label(userRelatorioSubTotal, 615, 40, 200, 100, Font.getHelvetica(),10, TextAlign.LEFT);
                 pagina.getElements().add(objLabelSubTotal);
                 }catch(Exception ex){
                 throw new Exception("Erro ao somar TOTAL.");
                 }
                 */
            }

            JanelaSalvar salvar = new JanelaSalvar(documento, filtroPavimento);
            salvar.setVisible(true);
            // Save the PDF document
            /*
             String url;
             Date gerarNomeArquivo = new Date();

             if(checkBoxSalvarNaRede.isSelected()==true){

             url = "\\\\sadfs01\\GTINF\\USINF\\USINF 2014\\Sistema Micros\\Sistema Micros - JAVA\\Relatorios\\Relatorio - Completo - "+gerarNomeArquivo.getTime()+".pdf";
             documento.draw(url);

             }else{
             String a = System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos";

             if(new File(a).exists()==false){
             new File(System.getProperty("user.home")+"\\Documents\\Relatorio de Equipamentos").mkdirs();
             }

             url = a+"\\Relatorio - Pavimento - "+filtroPavimento.getPavimento()+" - "+gerarNomeArquivo.getTime()+".pdf";
             documento.draw(url);
                
             }

             JOptionPane.showMessageDialog(rootPane, "Relatório gerado com sucesso em:   "+"\""+url+"\"");
             */

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao tentar gerar relatório: " + ex.getMessage());
        }

    }//GEN-LAST:event_jButtonRel_Pav_PaisagemActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        FormRelatorioCompleto relatorioCompleto = new FormRelatorioCompleto(this.logado);
        relatorioCompleto.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void comboBoxListagem() {
        try {

            //*********************** ComboBox Pavimento:
            try {
                Pavimento comboPavimento = new Pavimento();

                comboPavimento.setPavimento("");

                allPavimentos = Fachada.getInstancia().listarPavimento(comboPavimento);

                DefaultComboBoxModel listaComboPavimento = new DefaultComboBoxModel();

                listaComboPavimento.addElement("Pavimento");

                for (int i = 0; i < allPavimentos.size(); i++) {
                    Pavimento nomeComboPavimento = new Pavimento();
                    nomeComboPavimento = allPavimentos.get(i);
                    listaComboPavimento.addElement(nomeComboPavimento.getPavimento());
                }
                ComboBoxPavimento.setModel(listaComboPavimento);

            } catch (Exception e) {
                throw new Exception("Não existe nenhumo Pavimento cadastrado no banco de dados " + e.getMessage());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar opções do Combo Box :" + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormRelatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormRelatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormRelatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormRelatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormRelatorios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonPreverPavimento;
    private javax.swing.JButton ButtonSair;
    private javax.swing.JComboBox ComboBoxPavimento;
    private javax.swing.JButton jButtonRel_Pav_Paisagem;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel textoPaginas;
    private javax.swing.JLabel textoPavimento;
    private javax.swing.JLabel textoSubTotal;
    // End of variables declaration//GEN-END:variables

}
